// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     user.avsc
 *     user_favorite_color_updated.avsc
 */
package main

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type UserFavoriteColorUpdated struct {
	Name string `json:"name"`

	Favorite_color string `json:"favorite_color"`
}

const UserFavoriteColorUpdatedAvroCRC64Fingerprint = "\xd9\x03\x8f\xff6\x87\xbf\xfe"

func NewUserFavoriteColorUpdated() UserFavoriteColorUpdated {
	r := UserFavoriteColorUpdated{}
	return r
}

func DeserializeUserFavoriteColorUpdated(r io.Reader) (UserFavoriteColorUpdated, error) {
	t := NewUserFavoriteColorUpdated()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeUserFavoriteColorUpdatedFromSchema(r io.Reader, schema string) (UserFavoriteColorUpdated, error) {
	t := NewUserFavoriteColorUpdated()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeUserFavoriteColorUpdated(r UserFavoriteColorUpdated, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Favorite_color, w)
	if err != nil {
		return err
	}
	return err
}

func (r UserFavoriteColorUpdated) Serialize(w io.Writer) error {
	return writeUserFavoriteColorUpdated(r, w)
}

func (r UserFavoriteColorUpdated) Schema() string {
	return "{\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"favorite_color\",\"type\":\"string\"}],\"name\":\"confluent.io.examples.serialization.avro.UserFavoriteColorUpdated\",\"type\":\"record\"}"
}

func (r UserFavoriteColorUpdated) SchemaName() string {
	return "confluent.io.examples.serialization.avro.UserFavoriteColorUpdated"
}

func (_ UserFavoriteColorUpdated) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ UserFavoriteColorUpdated) SetInt(v int32)       { panic("Unsupported operation") }
func (_ UserFavoriteColorUpdated) SetLong(v int64)      { panic("Unsupported operation") }
func (_ UserFavoriteColorUpdated) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ UserFavoriteColorUpdated) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ UserFavoriteColorUpdated) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ UserFavoriteColorUpdated) SetString(v string)   { panic("Unsupported operation") }
func (_ UserFavoriteColorUpdated) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *UserFavoriteColorUpdated) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Name}

		return w

	case 1:
		w := types.String{Target: &r.Favorite_color}

		return w

	}
	panic("Unknown field index")
}

func (r *UserFavoriteColorUpdated) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *UserFavoriteColorUpdated) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ UserFavoriteColorUpdated) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ UserFavoriteColorUpdated) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ UserFavoriteColorUpdated) HintSize(int)                     { panic("Unsupported operation") }
func (_ UserFavoriteColorUpdated) Finalize()                        {}

func (_ UserFavoriteColorUpdated) AvroCRC64Fingerprint() []byte {
	return []byte(UserFavoriteColorUpdatedAvroCRC64Fingerprint)
}

func (r UserFavoriteColorUpdated) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["favorite_color"], err = json.Marshal(r.Favorite_color)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *UserFavoriteColorUpdated) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["favorite_color"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Favorite_color); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for favorite_color")
	}
	return nil
}
