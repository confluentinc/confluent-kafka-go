language: go
osx_image: xcode9.2
env:
 global:
  - PATH="$PATH:$GOPATH/bin"

jobs:
 include:
 - name: "Go 1.11 OSX bundled librdkafka"
   go: "1.11"
   os: osx
 - name: "Go 1.14 OSX bundled librdkafka"
   go: "1.14"
   os: osx
 - name: "Go 1.11 Linux bundled librdkafka"
   go: "1.11"
   os: linux
 - name: "Go 1.14 Linux bundled librdkafka"
   go: "1.14"
   os: linux
 - name: "Go 1.14 OSX dynamic librdkafka"
   go: "1.14"
   os: osx
   env:
   - BUILD_TYPE='-tags dynamic'
   - PKG_CONFIG_PATH="/usr/local/opt/openssl/lib/pkgconfig:$HOME/gopath/src/github.com/confluentinc/confluent-kafka-go/tmp-build/lib/pkgconfig"
   - LD_LIBRARY_PATH="$HOME/gopath/src/github.com/confluentinc/confluent-kafka-go/tmp-build/lib"
   - DYLD_LIBRARY_PATH="$HOME/gopath/src/github.com/confluentinc/confluent-kafka-go/tmp-build/lib"
   - LIBRDKAFKA_VERSION=master
 - name: "Go 1.14 Linux dynamic librdkafka"
   go: "1.14"
   os: linux
   env:
   - BUILD_TYPE='-tags dynamic'
   - PKG_CONFIG_PATH="$HOME/gopath/src/github.com/confluentinc/confluent-kafka-go/tmp-build/lib/pkgconfig"
   - LD_LIBRARY_PATH="$HOME/gopath/src/github.com/confluentinc/confluent-kafka-go/tmp-build/lib"
   - DYLD_LIBRARY_PATH="$HOME/gopath/src/github.com/confluentinc/confluent-kafka-go/tmp-build/lib"
   - LIBRDKAFKA_VERSION=master

before_install:
  - if [[ $TRAVIS_OS_NAME == linux ]]; then wget -qO - https://packages.confluent.io/deb/5.4/archive.key | sudo apt-key add - ; fi
  - if [[ $TRAVIS_OS_NAME == linux ]]; then sudo add-apt-repository "deb [arch=amd64] https://packages.confluent.io/deb/5.4 stable main" -y ; fi
  - if [[ $TRAVIS_OS_NAME == linux ]]; then sudo apt-get update -q ; fi
  - if [[ $TRAVIS_OS_NAME == linux ]]; then sudo apt-get install confluent-librdkafka-plugins -y ; fi
  - rm -rf tmp-build
  - if [[ -n $BUILD_TYPE ]]; then bash mk/bootstrap-librdkafka.sh ${LIBRDKAFKA_VERSION} tmp-build ; fi
  - go get -u golang.org/x/lint/golint && touch .do_lint

install:
  - for dir in kafka examples ; do (cd $dir && go get ${BUILD_TYPE} ./...) ; done
  - for dir in kafka examples ; do (cd $dir && go install ${BUILD_TYPE} ./...) ; done

script:
  # should be replaced with golangci-lint
  - if [[ -f .do_lint ]]; then golint -set_exit_status ./examples/... ./kafka/... ./kafkatest/... ; fi
  - for dir in kafka ; do (cd $dir && go test -timeout 60s -v ${BUILD_TYPE} ./...) ; done
  - go-kafkacat --help
