// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
package recordname

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

// advanced schema for tests
type Advanced struct {
	// age
	Number *UnionLongNull `json:"number"`
	// a name
	Name UnionString `json:"name"`
	// friends
	Friends map[string]BasicPerson `json:"friends"`
	// family
	Family map[string]BasicPerson `json:"family"`
}

const AdvancedAvroCRC64Fingerprint = "\x05\x9aT\x12\xf0z\x0f\xfa"

func NewAdvanced() Advanced {
	r := Advanced{}
	r.Number = NewUnionLongNull()

	r.Name = NewUnionString()

	r.Friends = make(map[string]BasicPerson)

	r.Family = make(map[string]BasicPerson)

	return r
}

func DeserializeAdvanced(r io.Reader) (Advanced, error) {
	t := NewAdvanced()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAdvancedFromSchema(r io.Reader, schema string) (Advanced, error) {
	t := NewAdvanced()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAdvanced(r Advanced, w io.Writer) error {
	var err error
	err = writeUnionLongNull(r.Number, w)
	if err != nil {
		return err
	}
	err = writeUnionString(r.Name, w)
	if err != nil {
		return err
	}
	err = writeMapBasicPerson(r.Friends, w)
	if err != nil {
		return err
	}
	err = writeMapBasicPerson(r.Family, w)
	if err != nil {
		return err
	}
	return err
}

func (r Advanced) Serialize(w io.Writer) error {
	return writeAdvanced(r, w)
}

func (r Advanced) Schema() string {
	return "{\"doc\":\"advanced schema for tests\",\"fields\":[{\"doc\":\"age\",\"name\":\"number\",\"type\":[\"long\",\"null\"]},{\"doc\":\"a name\",\"name\":\"name\",\"type\":[\"string\"]},{\"doc\":\"friends\",\"name\":\"friends\",\"type\":{\"type\":\"map\",\"values\":{\"fields\":[{\"doc\":\"friend age\",\"name\":\"number\",\"type\":[\"long\",\"null\"]},{\"doc\":\"friend name\",\"name\":\"name\",\"type\":[\"string\"]}],\"name\":\"basicPerson\",\"namespace\":\"python.test.advanced\",\"type\":\"record\"}}},{\"doc\":\"family\",\"name\":\"family\",\"type\":{\"namespace\":\"python.test.advanced\",\"type\":\"map\",\"values\":\"python.test.advanced.basicPerson\"}}],\"name\":\"python.test.advanced.advanced\",\"type\":\"record\"}"
}

func (r Advanced) SchemaName() string {
	return "python.test.advanced.advanced"
}

func (_ Advanced) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Advanced) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Advanced) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Advanced) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Advanced) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Advanced) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Advanced) SetString(v string)   { panic("Unsupported operation") }
func (_ Advanced) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Advanced) Get(i int) types.Field {
	switch i {
	case 0:
		r.Number = NewUnionLongNull()

		return r.Number
	case 1:
		r.Name = NewUnionString()

		w := types.Record{Target: &r.Name}

		return w

	case 2:
		r.Friends = make(map[string]BasicPerson)

		w := MapBasicPersonWrapper{Target: &r.Friends}

		return &w

	case 3:
		r.Family = make(map[string]BasicPerson)

		w := MapBasicPersonWrapper{Target: &r.Family}

		return &w

	}
	panic("Unknown field index")
}

func (r *Advanced) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Advanced) NullField(i int) {
	switch i {
	case 0:
		r.Number = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Advanced) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Advanced) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Advanced) HintSize(int)                     { panic("Unsupported operation") }
func (_ Advanced) Finalize()                        {}

func (_ Advanced) AvroCRC64Fingerprint() []byte {
	return []byte(AdvancedAvroCRC64Fingerprint)
}

func (r Advanced) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["number"], err = json.Marshal(r.Number)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["friends"], err = json.Marshal(r.Friends)
	if err != nil {
		return nil, err
	}
	output["family"], err = json.Marshal(r.Family)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Advanced) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["number"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Number); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for number")
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["friends"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Friends); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for friends")
	}
	val = func() json.RawMessage {
		if v, ok := fields["family"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Family); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for family")
	}
	return nil
}
