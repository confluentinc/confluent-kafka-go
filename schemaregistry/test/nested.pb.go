// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.1
// source: schemaregistry/test/proto/nested.proto

package test

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_ACTIVE   Status = 0
	Status_INACTIVE Status = 1
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "ACTIVE",
		1: "INACTIVE",
	}
	Status_value = map[string]int32{
		"ACTIVE":   0,
		"INACTIVE": 1,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_schemaregistry_test_proto_nested_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_schemaregistry_test_proto_nested_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_schemaregistry_test_proto_nested_proto_rawDescGZIP(), []int{0}
}

type NestedMessage_InnerEnum int32

const (
	NestedMessage_ZERO      NestedMessage_InnerEnum = 0
	NestedMessage_ALSO_ZERO NestedMessage_InnerEnum = 0
)

// Enum value maps for NestedMessage_InnerEnum.
var (
	NestedMessage_InnerEnum_name = map[int32]string{
		0: "ZERO",
		// Duplicate value: 0: "ALSO_ZERO",
	}
	NestedMessage_InnerEnum_value = map[string]int32{
		"ZERO":      0,
		"ALSO_ZERO": 0,
	}
)

func (x NestedMessage_InnerEnum) Enum() *NestedMessage_InnerEnum {
	p := new(NestedMessage_InnerEnum)
	*p = x
	return p
}

func (x NestedMessage_InnerEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NestedMessage_InnerEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_schemaregistry_test_proto_nested_proto_enumTypes[1].Descriptor()
}

func (NestedMessage_InnerEnum) Type() protoreflect.EnumType {
	return &file_schemaregistry_test_proto_nested_proto_enumTypes[1]
}

func (x NestedMessage_InnerEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NestedMessage_InnerEnum.Descriptor instead.
func (NestedMessage_InnerEnum) EnumDescriptor() ([]byte, []int) {
	return file_schemaregistry_test_proto_nested_proto_rawDescGZIP(), []int{3, 0}
}

type UserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UserId:
	//	*UserId_KafkaUserId
	//	*UserId_OtherUserId
	//	*UserId_AnotherId
	UserId isUserId_UserId `protobuf_oneof:"user_id"`
}

func (x *UserId) Reset() {
	*x = UserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schemaregistry_test_proto_nested_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserId) ProtoMessage() {}

func (x *UserId) ProtoReflect() protoreflect.Message {
	mi := &file_schemaregistry_test_proto_nested_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserId.ProtoReflect.Descriptor instead.
func (*UserId) Descriptor() ([]byte, []int) {
	return file_schemaregistry_test_proto_nested_proto_rawDescGZIP(), []int{0}
}

func (m *UserId) GetUserId() isUserId_UserId {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (x *UserId) GetKafkaUserId() string {
	if x, ok := x.GetUserId().(*UserId_KafkaUserId); ok {
		return x.KafkaUserId
	}
	return ""
}

func (x *UserId) GetOtherUserId() int32 {
	if x, ok := x.GetUserId().(*UserId_OtherUserId); ok {
		return x.OtherUserId
	}
	return 0
}

func (x *UserId) GetAnotherId() *MessageId {
	if x, ok := x.GetUserId().(*UserId_AnotherId); ok {
		return x.AnotherId
	}
	return nil
}

type isUserId_UserId interface {
	isUserId_UserId()
}

type UserId_KafkaUserId struct {
	KafkaUserId string `protobuf:"bytes,1,opt,name=kafka_user_id,json=kafkaUserId,proto3,oneof"`
}

type UserId_OtherUserId struct {
	OtherUserId int32 `protobuf:"varint,2,opt,name=other_user_id,json=otherUserId,proto3,oneof"`
}

type UserId_AnotherId struct {
	AnotherId *MessageId `protobuf:"bytes,3,opt,name=another_id,json=anotherId,proto3,oneof"`
}

func (*UserId_KafkaUserId) isUserId_UserId() {}

func (*UserId_OtherUserId) isUserId_UserId() {}

func (*UserId_AnotherId) isUserId_UserId() {}

type MessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MessageId) Reset() {
	*x = MessageId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schemaregistry_test_proto_nested_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageId) ProtoMessage() {}

func (x *MessageId) ProtoReflect() protoreflect.Message {
	mi := &file_schemaregistry_test_proto_nested_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageId.ProtoReflect.Descriptor instead.
func (*MessageId) Descriptor() ([]byte, []int) {
	return file_schemaregistry_test_proto_nested_proto_rawDescGZIP(), []int{1}
}

func (x *MessageId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SomeVal:
	//	*ComplexType_OneId
	//	*ComplexType_OtherId
	SomeVal  isComplexType_SomeVal `protobuf_oneof:"some_val"`
	IsActive bool                  `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (x *ComplexType) Reset() {
	*x = ComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schemaregistry_test_proto_nested_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexType) ProtoMessage() {}

func (x *ComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_schemaregistry_test_proto_nested_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexType.ProtoReflect.Descriptor instead.
func (*ComplexType) Descriptor() ([]byte, []int) {
	return file_schemaregistry_test_proto_nested_proto_rawDescGZIP(), []int{2}
}

func (m *ComplexType) GetSomeVal() isComplexType_SomeVal {
	if m != nil {
		return m.SomeVal
	}
	return nil
}

func (x *ComplexType) GetOneId() string {
	if x, ok := x.GetSomeVal().(*ComplexType_OneId); ok {
		return x.OneId
	}
	return ""
}

func (x *ComplexType) GetOtherId() int32 {
	if x, ok := x.GetSomeVal().(*ComplexType_OtherId); ok {
		return x.OtherId
	}
	return 0
}

func (x *ComplexType) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type isComplexType_SomeVal interface {
	isComplexType_SomeVal()
}

type ComplexType_OneId struct {
	OneId string `protobuf:"bytes,1,opt,name=one_id,json=oneId,proto3,oneof"`
}

type ComplexType_OtherId struct {
	OtherId int32 `protobuf:"varint,2,opt,name=other_id,json=otherId,proto3,oneof"`
}

func (*ComplexType_OneId) isComplexType_SomeVal() {}

func (*ComplexType_OtherId) isComplexType_SomeVal() {}

//
// Complex message using nested protos and repeated fields
type NestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            *UserId                     `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsActive          bool                        `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	ExperimentsActive []string                    `protobuf:"bytes,3,rep,name=experiments_active,json=experimentsActive,proto3" json:"experiments_active,omitempty"`
	UpdatedAt         *timestamppb.Timestamp      `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status            Status                      `protobuf:"varint,5,opt,name=status,proto3,enum=io.confluent.kafka.serializers.protobuf.test.Status" json:"status,omitempty"`
	ComplexType       *ComplexType                `protobuf:"bytes,6,opt,name=complex_type,json=complexType,proto3" json:"complex_type,omitempty"`
	MapType           map[string]string           `protobuf:"bytes,7,rep,name=map_type,json=mapType,proto3" json:"map_type,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Inner             *NestedMessage_InnerMessage `protobuf:"bytes,8,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *NestedMessage) Reset() {
	*x = NestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schemaregistry_test_proto_nested_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedMessage) ProtoMessage() {}

func (x *NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schemaregistry_test_proto_nested_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedMessage.ProtoReflect.Descriptor instead.
func (*NestedMessage) Descriptor() ([]byte, []int) {
	return file_schemaregistry_test_proto_nested_proto_rawDescGZIP(), []int{3}
}

func (x *NestedMessage) GetUserId() *UserId {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *NestedMessage) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *NestedMessage) GetExperimentsActive() []string {
	if x != nil {
		return x.ExperimentsActive
	}
	return nil
}

func (x *NestedMessage) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NestedMessage) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

func (x *NestedMessage) GetComplexType() *ComplexType {
	if x != nil {
		return x.ComplexType
	}
	return nil
}

func (x *NestedMessage) GetMapType() map[string]string {
	if x != nil {
		return x.MapType
	}
	return nil
}

func (x *NestedMessage) GetInner() *NestedMessage_InnerMessage {
	if x != nil {
		return x.Inner
	}
	return nil
}

type NestedMessage_InnerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Ids []int32 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *NestedMessage_InnerMessage) Reset() {
	*x = NestedMessage_InnerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schemaregistry_test_proto_nested_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedMessage_InnerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedMessage_InnerMessage) ProtoMessage() {}

func (x *NestedMessage_InnerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_schemaregistry_test_proto_nested_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedMessage_InnerMessage.ProtoReflect.Descriptor instead.
func (*NestedMessage_InnerMessage) Descriptor() ([]byte, []int) {
	return file_schemaregistry_test_proto_nested_proto_rawDescGZIP(), []int{3, 1}
}

func (x *NestedMessage_InnerMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NestedMessage_InnerMessage) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_schemaregistry_test_proto_nested_proto protoreflect.FileDescriptor

var file_schemaregistry_test_proto_nested_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x69, 0x6f, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x58,
	0x0a, 0x0a, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x74, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x09, 0x61,
	0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x6c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x22, 0x8e,
	0x06, 0x0a, 0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74,
	0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x74, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6f, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x74, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x63, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x75,
	0x65, 0x6e, 0x74, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x69, 0x6f, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x75, 0x65, 0x6e, 0x74, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x34, 0x0a, 0x0c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x28, 0x0a, 0x09, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x53, 0x4f, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x1a,
	0x02, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a,
	0x04, 0x08, 0x09, 0x10, 0x0c, 0x52, 0x03, 0x66, 0x6f, 0x6f, 0x52, 0x03, 0x62, 0x61, 0x72, 0x2a,
	0x22, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schemaregistry_test_proto_nested_proto_rawDescOnce sync.Once
	file_schemaregistry_test_proto_nested_proto_rawDescData = file_schemaregistry_test_proto_nested_proto_rawDesc
)

func file_schemaregistry_test_proto_nested_proto_rawDescGZIP() []byte {
	file_schemaregistry_test_proto_nested_proto_rawDescOnce.Do(func() {
		file_schemaregistry_test_proto_nested_proto_rawDescData = protoimpl.X.CompressGZIP(file_schemaregistry_test_proto_nested_proto_rawDescData)
	})
	return file_schemaregistry_test_proto_nested_proto_rawDescData
}

var file_schemaregistry_test_proto_nested_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_schemaregistry_test_proto_nested_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_schemaregistry_test_proto_nested_proto_goTypes = []interface{}{
	(Status)(0),                        // 0: io.confluent.kafka.serializers.protobuf.test.Status
	(NestedMessage_InnerEnum)(0),       // 1: io.confluent.kafka.serializers.protobuf.test.NestedMessage.InnerEnum
	(*UserId)(nil),                     // 2: io.confluent.kafka.serializers.protobuf.test.UserId
	(*MessageId)(nil),                  // 3: io.confluent.kafka.serializers.protobuf.test.MessageId
	(*ComplexType)(nil),                // 4: io.confluent.kafka.serializers.protobuf.test.ComplexType
	(*NestedMessage)(nil),              // 5: io.confluent.kafka.serializers.protobuf.test.NestedMessage
	nil,                                // 6: io.confluent.kafka.serializers.protobuf.test.NestedMessage.MapTypeEntry
	(*NestedMessage_InnerMessage)(nil), // 7: io.confluent.kafka.serializers.protobuf.test.NestedMessage.InnerMessage
	(*timestamppb.Timestamp)(nil),      // 8: google.protobuf.Timestamp
}
var file_schemaregistry_test_proto_nested_proto_depIdxs = []int32{
	3, // 0: io.confluent.kafka.serializers.protobuf.test.UserId.another_id:type_name -> io.confluent.kafka.serializers.protobuf.test.MessageId
	2, // 1: io.confluent.kafka.serializers.protobuf.test.NestedMessage.user_id:type_name -> io.confluent.kafka.serializers.protobuf.test.UserId
	8, // 2: io.confluent.kafka.serializers.protobuf.test.NestedMessage.updated_at:type_name -> google.protobuf.Timestamp
	0, // 3: io.confluent.kafka.serializers.protobuf.test.NestedMessage.status:type_name -> io.confluent.kafka.serializers.protobuf.test.Status
	4, // 4: io.confluent.kafka.serializers.protobuf.test.NestedMessage.complex_type:type_name -> io.confluent.kafka.serializers.protobuf.test.ComplexType
	6, // 5: io.confluent.kafka.serializers.protobuf.test.NestedMessage.map_type:type_name -> io.confluent.kafka.serializers.protobuf.test.NestedMessage.MapTypeEntry
	7, // 6: io.confluent.kafka.serializers.protobuf.test.NestedMessage.inner:type_name -> io.confluent.kafka.serializers.protobuf.test.NestedMessage.InnerMessage
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_schemaregistry_test_proto_nested_proto_init() }
func file_schemaregistry_test_proto_nested_proto_init() {
	if File_schemaregistry_test_proto_nested_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_schemaregistry_test_proto_nested_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schemaregistry_test_proto_nested_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schemaregistry_test_proto_nested_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schemaregistry_test_proto_nested_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schemaregistry_test_proto_nested_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedMessage_InnerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_schemaregistry_test_proto_nested_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*UserId_KafkaUserId)(nil),
		(*UserId_OtherUserId)(nil),
		(*UserId_AnotherId)(nil),
	}
	file_schemaregistry_test_proto_nested_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ComplexType_OneId)(nil),
		(*ComplexType_OtherId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schemaregistry_test_proto_nested_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schemaregistry_test_proto_nested_proto_goTypes,
		DependencyIndexes: file_schemaregistry_test_proto_nested_proto_depIdxs,
		EnumInfos:         file_schemaregistry_test_proto_nested_proto_enumTypes,
		MessageInfos:      file_schemaregistry_test_proto_nested_proto_msgTypes,
	}.Build()
	File_schemaregistry_test_proto_nested_proto = out.File
	file_schemaregistry_test_proto_nested_proto_rawDesc = nil
	file_schemaregistry_test_proto_nested_proto_goTypes = nil
	file_schemaregistry_test_proto_nested_proto_depIdxs = nil
}
